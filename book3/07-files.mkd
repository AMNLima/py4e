Arquivos 
=====

\index{file}
\index{type!file}

Persistência 
-----------

\index{persistence}
\index{secondary memory}

Até agora, aprendemos como escrever programas e comunicar nossas intenções para a unidade central de processamento usando a execução condicional, funções e interações. Aprendemos como criar e usar estruturas de dados na memoria principal. A CPU e a memoria são onde o nosso software funciona e é executado, é onde todo o pensamento acontece.


Mas se você se lembrar de nossas discussões de arquitetura de hardware, uma vez que a energia é desligada, qualquer coisa armazenada na CPU ou memória principal é apagada. Então, até agora, nossos programas foram apenas exercícios divertidos para aprender Python.


![Secondary Memory](height=2.5in@../images/arch)

Neste capítulo, começamos a trabalhar com memória secundária (ou arquivos). A memória secundária não é apagada quando a alimentação está desligada. Ou, no caso de uma unidade flash USB, os dados que escrevemos de nossos programas podem ser removidos do sistema e transportados para outro sistema.

Nós nos concentraremos principalmente na leitura e escrita de arquivos de texto, como aqueles que criamos em um editor de texto. Mais tarde, veremos como trabalhar com arquivos de banco de dados que são arquivos binários, especificamente projetados para serem lidos e gravados através de software de banco de dados.

Abrindo um arquivo 
-------------

\index{file!open}
\index{open function}
\index{function!open}

Quando queremos ler ou escrever um arquivo (digamos no seu disco rígido), primeiro devemos abrir o arquivo. Abrir o arquivo se comunica com seu sistema operacional, que sabe onde os dados para cada arquivo são armazenados. Quando abre um ficheiro, está a pedir ao sistema operativo para localizar o ficheiro por nome e certifique-se de que o ficheiro existe. Neste exemplo, abrimos o arquivo mbox. txt, que deve ser armazenado na mesma pasta em que você está quando você inicia o Python. Você pode baixar este arquivo de [www.py4e.com/code3/mbox.txt](http://www.py4e.com/code3/mbox.txt)

~~~~ {.python}
>>> Arquivo = open('teste.txt')
>>> print(Arquivo)
<_io.TextIOWrapper name='mbox.txt' mode='r' encoding='cp1252'>
~~~~

\index{file handle}

Se o aberto for bem-sucedido, o sistema operacional retornará um identificador de arquivo. O identificador de arquivo não é os dados reais contidos no arquivo, mas em vez disso, é um "identificador" que podemos usar para ler os dados. Você recebe um identificador se o arquivo solicitado existe e você tem as permissões apropriadas para ler o arquivo.

![A File Handle](height=2.0in@../images/handle)

Se o arquivo não existir, abrir falhará com um Traceback e você não receberá um identificador para acessar o conteúdo do arquivo:

~~~~ {.python}
>>> fhand = open('stuff.txt')
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
FileNotFoundError: [Errno 2] No such file or directory: 'stuff.txt'

~~~~

Mais tarde, usaremos try e exceto para lidar mais graciosamente com a situação em que tentamos abrir um arquivo que não existe.

Arquivos de texto e linhas
--------------------

Um arquivo de texto pode ser pensado como uma seqüência de linhas, muito parecido com um Python, cadeia de caracteres pode ser pensado como uma seqüência de caracteres. Por exemplo, este é uma amostra de um arquivo de texto que registra a atividade de correio de vários indivíduos em uma equipe de desenvolvimento de projeto de código aberto:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
Return-Path: <postmaster@collab.sakaiproject.org>
Date: Sat, 5 Jan 2008 09:12:18 -0500
To: source@collab.sakaiproject.org
From: stephen.marquard@uct.ac.za
Subject: [sakai] svn commit: r39772 - content/branches/
Details: http://source.sakaiproject.org/viewsvn/?view=rev&rev=39772
...
~~~~

Todo o arquivo de interações de email está disponível a partir de

[www.py4e.com/code3/mbox.txt](http://www.py4e.com/code3/mbox.txt)

e uma versão abreviada do arquivo está disponível a partir de

[www.py4e.com/code3/mbox-short.txt](http://www.py4e.com/code3/mbox-short.txt)

Esses arquivos estão em um formato padrão para um arquivo que contém vários emails,
mensagens. As linhas que começam com "de" separam as mensagens e
as linhas que começam com "de:" fazem parte das mensagens. Para mais informações,
informações sobre o formato mbox, consulte
<https://en.wikipedia.org/wiki/Mbox>.

Para quebrar o arquivo em linhas, há um caractere especial que
representa o "fim da linha" chamado de * newLine *
Caractere.

\index{newline}

Em Python, representamos o caractere * newLine * como um
barra invertida-n em constantes de cadeia de caracteres. Mesmo que isso pareça ser dois
caracteres, é realmente um único caractere. Quando olhamos para o
variável inserindo "material" no intérprete, mostra-nos o `\n` em
a seqüência de caracteres, mas quando usamos ' print ' para mostrar a String, nós
Ver a cadeia de caracteres dividida em duas linhas pelo caractere de nova linha.

~~~~ {.python}
>>> coisas = 'Olá\nmundo!'
>>> coisas
'Olá\nmundo!'
>>> print(coisas)
Olá
mundo!
>>> coisas = 'X\nY'
>>> print(coisas)
X
Y
>>> len(coisas)
3
~~~~

Você também pode ver que o comprimento da seqüência de caracteres `X\nY` é * três *
caracteres porque o caractere de nova linha é um único caractere.

Então, quando olhamos para as linhas em um arquivo, precisamos * imaginar * que não
é um carácter invisível especial chamado a nova linha no final de cada
linha que marca o fim da linha.

Portanto, o caractere de nova linha separa os caracteres no arquivo em
Linhas.

Reading files
-------------

\index{file!reading}
\index{counter}

While the *file handle* does not contain the data for the
file, it is quite easy to construct a `for` loop to read
through and count each of the lines in a file:

\VerbatimInput{../code3/open.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

We can use the file handle as the sequence in our `for` loop.
Our `for` loop simply counts the number of lines in the file
and prints them out. The rough translation of the `for` loop
into English is, "for each line in the file represented by the file
handle, add one to the `count` variable."

The reason that the `open` function does not read the entire
file is that the file might be quite large with many gigabytes of data.
The `open` statement takes the same amount of time regardless
of the size of the file. The `for` loop actually causes the
data to be read from the file.

When the file is read using a `for` loop in this manner,
Python takes care of splitting the data in the file into separate lines
using the newline character. Python reads each line through the newline
and includes the newline as the last character in the `line`
variable for each iteration of the `for` loop.

Because the `for` loop reads the data one line at a time, it
can efficiently read and count the lines in very large files without
running out of main memory to store the data. The above program can
count the lines in any size file using very little memory since each
line is read, counted, and then discarded.

If you know the file is relatively small compared to the size of your
main memory, you can read the whole file into one string using the
`read` method on the file handle.

~~~~ {.python}
>>> fhand = open('mbox-short.txt')
>>> inp = fhand.read()
>>> print(len(inp))
94626
>>> print(inp[:20])
From stephen.marquar
~~~~

In this example, the entire contents (all 94,626 characters) of the file
*mbox-short.txt* are read directly into the variable
`inp`. We use string slicing to print out the first 20
characters of the string data stored in `inp`.


When the file is read in this manner, all the characters including all
of the lines and newline characters are one big string in the variable
`inp`. It is a good idea to store the output of `read` as a variable
because each call to `read` exhausts the resource:

~~~~ {.python}
>>> fhand = open('mbox-short.txt')
>>> print(len(fhand.read()))
94626
>>> print(len(fhand.read()))
0
~~~~

Remember that this form of the `open` function should only be used
if the file data will fit comfortably in the main memory of your computer.
If the file is too large to fit in main memory, you should write your
program to read the file in chunks using a `for` or `while` loop.

Searching through a file
------------------------

When you are searching through data in a file, it is a very common
pattern to read through a file, ignoring most of the lines and only
processing lines which meet a particular condition. We can combine the
pattern for reading a file with string methods to build simple search
mechanisms.

\index{filter pattern}
\index{pattern!filter}

For example, if we wanted to read a file and only print out lines which
started with the prefix "From:", we could use the string method
*startswith* to select only those lines with the desired
prefix:

\VerbatimInput{../code3/search1.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

When this program runs, we get the following output:

~~~~
From: stephen.marquard@uct.ac.za

From: louis@media.berkeley.edu

From: zqian@umich.edu

From: rjlowe@iupui.edu
...
~~~~

The output looks great since the only lines we are seeing are those
which start with "From:", but why are we seeing the extra blank lines?
This is due to that invisible *newline* character. Each
of the lines ends with a newline, so the `print` statement
prints the string in the variable *line* which includes a
newline and then `print` adds *another* newline, resulting in
the double spacing effect we see.

We could use line slicing to print all but the last character, but a
simpler approach is to use the *rstrip* method which
strips whitespace from the right side of a string as follows:

\VerbatimInput{../code3/search2.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

When this program runs, we get the following output:

~~~~
From: stephen.marquard@uct.ac.za
From: louis@media.berkeley.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
From: zqian@umich.edu
From: rjlowe@iupui.edu
From: cwen@iupui.edu
...
~~~~

As your file processing programs get more complicated, you may want to
structure your search loops using `continue`. The basic idea
of the search loop is that you are looking for "interesting" lines and
effectively skipping "uninteresting" lines. And then when we find an
interesting line, we do something with that line.

We can structure the loop to follow the pattern of skipping
uninteresting lines as follows:

\VerbatimInput{../code3/search3.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

The output of the program is the same. In English, the uninteresting
lines are those which do not start with "From:", which we skip using
`continue`. For the "interesting" lines (i.e., those that
start with "From:") we perform the processing on those lines.

We can use the `find` string method to simulate a text editor
search that finds lines where the search string is anywhere in the line.
Since `find` looks for an occurrence of a string within
another string and either returns the position of the string or -1 if
the string was not found, we can write the following loop to show lines
which contain the string "@uct.ac.za" (i.e., they come from the
University of Cape Town in South Africa):

\VerbatimInput{../code3/search4.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Which produces the following output:

~~~~
From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
X-Authentication-Warning: set sender to stephen.marquard@uct.ac.za using -f
From: stephen.marquard@uct.ac.za
Author: stephen.marquard@uct.ac.za
From david.horwitz@uct.ac.za Fri Jan  4 07:02:32 2008
X-Authentication-Warning: set sender to david.horwitz@uct.ac.za using -f
From: david.horwitz@uct.ac.za
Author: david.horwitz@uct.ac.za
...
~~~~

Here we also use the contracted form of the `if` statement
where we put the `continue ` on the same line as the
`if`. This contracted form of the `if` functions
the same as if the `continue` were on the next line and
indented.

Deixando o usuário escolher o nome do arquivo
-------------------------------------

Nós realmente não queremos ter quer editar nosso código Python toda vez que quisermos processar um arquivo diferente. Pode ser mais útil pedir ao usuário para inserir a String do nome do arquivo cada vez que o programa for executado, então, nosso programa poderá ser usado em arquivos diferentes sem mudar o código Python.

Isso é bastante simples de fazer, lendo o nome do arquivo do usuário usando `input` como à seguir:

\VerbatimInput{../code3/search6.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

Nós lemos o nome do arquivo do usuário e o colocamos numa variável nomeada `fname`, abrimos esse arquivo e então podemos executar o programa repetidas vezes em arquivos diferentes.

~~~~
python pesquisa6.py
Digite o nome do arquivo: mbox.txt
Havia 1797 linhas de conteúdo em mbox.txt

python pesquisa6.py
Digite o nome do arquivo: mbox-short.txt
Havia 27 linhas de conteúdo em mbox-short.txt
~~~~

Antes de dar uma olhada na próxima seção, dê uma olhada no programa acima e pergunte a si mesmo: "O que poderia dar errado aqui?" ou “O que nosso amiguinho usuário poderia fazer que pararia desgraçadamente a execução do nosso programinha com um erro de traceback e faria com que não parecêssemos mais tão legais aos olhos do usuário?”

Usando `try, except,` e `open`
-----------------------------------------------------

Eu te falei pra não espiar, essa é a sua última chance.

E se nosso usuário digitar algo que não seja um nome de arquivo?

~~~~
python pesquisa6.py
Digite o nome do arquivo: missing.txt
Traceback (most recent call last):
  File "pesquisa6.py", line 2, in <module>
    fhand = open(fname)
FileNotFoundError: [Errno 2] No such file or directory: 'missing.txt'

python pesquisa6.py
Digite o nome do arquivo: na na boo boo
Traceback (most recent call last):
  File "pesquisa6.py", line 2, in <module>
    fhand = open(fname)
FileNotFoundError: [Errno 2] No such file or directory: 'na na boo boo'
~~~~

Não ria. Os usuários eventualmente farão todas as coisas possíveis que podem fazer para quebrar seus programas, seja de propósito ou com intenção maliciosa. De fato, uma parte importante de qualquer equipe de desenvolvimento de software é uma pessoa ou grupo chamado Quality Assurance (ou QA, abreviado) cujo trabalho é fazer as coisas mais loucas possíveis na tentativa de quebrar o software que o programador criou.

\index{Quality Assurance}
\index{QA}

A equipe de QA é responsável por encontrar as falhas no programa antes de entregá-lo aos usuários finais que possivelmente estarão comprando o software ou pagando nosso salário para fazer o software. Então a equipe de QA é a melhor amiga do programador.

\index{try statement}
\index{statement!try}
\index{open function}
\index{function!open}
\index{exception!IOError}
\index{IOError}

Então, agora que vemos a falha no programa, podemos corrigi-lo usando a estrutura `try` / `except`. Precisamos assumir que a chamada do `open` pode falhar e adicionar o código de recuperação da seguinte forma:

\VerbatimInput{../code3/search7.py}
\begin{trinketfiles}
../code3/mbox-short.txt
\end{trinketfiles}

A função `exit` termina o programa. É uma função sem retorno. Agora, quando nosso usuário (ou equipe de QA)  digitar bobagens ou nomes de arquivos que não existem, nós os “pegamos” e recuperamos com elegância.

~~~~
python pesquisa7.py
Digite o nome do arquivo: mbox.txt
Havia 1797 linhas de conteúdo em mbox.txt

python pesquisa7.py
Digite o nome do arquivo: na na boo boo
File cannot be opened: na na boo boo
~~~~

\index{Pythonic}

Proteger a chamada do `open` é um bom exemplo do uso adequado do `try` e `except` em um programa Python. Usamos o termo "Pythonico" quando estamos fazendo algo do tipo "Python". Podemos dizer que o exemplo acima é a maneira Python de abrir um arquivo.

Uma vez que você se torne mais habilidoso em Python, você pode interagir com outros programadores em Python para decidir qual das duas soluções equivalentes a um problema é "mais Pythonico". O objetivo de ser "mais Pythonico" capta a noção de que a programação é parte engenharia e parte arte. Nem sempre estamos interessados em fazer algo funcionar, queremos também que a nossa solução seja elegante e seja apreciada como elegante pelos nossos pares.

Escrevendo arquivos
-------------------

\index{file!writing}

Para escrever um arquivo você tem que abri-lo com o modo “w” como segundo parâmetro:

~~~~ {.python}
>>> fout = open('output.txt', 'w')
>>> print(fout)
<_io.TextIOWrapper name='output.txt' mode='w' encoding='cp1252'>
~~~~

Se o arquivo já existir, abri-lo no modo de gravação limpa os dados antigos e começa de novo, por isso tome cuidado! Se o arquivo não existir, um novo será criado.

O método `write` do objeto de manipulação de arquivos coloca dados no arquivo, retornando o número de caracteres gravados. O modo de gravação padrão é o texto para escrever (e ler) strings.


~~~~ {.python}
>>> line1 = "This here's the wattle,\n"
>>> fout.write(line1)
24
~~~~

\index{newline}

Novamente, o arquivo mantém o controle de onde está, portanto, se você chamar `write` novamente, ele adicionará os novos dados ao final.
Devemos nos certificar de gerenciar as extremidades das linhas à medida que escrevemos no arquivo inserindo explicitamente o caractere de nova linha quando queremos terminar uma linha. A instrução `print` anexa automaticamente uma nova linha, mas o método `write` não adiciona a nova linha automaticamente.

~~~~ {.python}
>>> line2 = 'the emblem of our land.\n'
>>> fout.write(line2)
24
~~~~

Quando terminar de escrever, feche o arquivo para certificar-se de que o último bit de dados esteja fisicamente gravado no disco, para que ele não seja perdido se faltar energia.

~~~~ {.python}
>>> fout.close()
~~~~

Poderíamos fechar os arquivos que abrimos para leitura também, mas podemos ser um pouco desleixados se abrirmos apenas alguns arquivos, pois o Python garante que todos os arquivos abertos sejam fechados quando o programa terminar. Quando estamos escrevendo arquivos, queremos fechar explicitamente os arquivos para não deixar nada ao acaso.

\index{close method}
\index{method!close}

Debugging
---------

\index{debugging}
\index{espaços em branco}

Quando você está lendo ou escrevendo arquivos, pode ser que encontre problemas
com espaços em branco. Esses erros podem ser difíceis de tratar porque espaços,
tabulações e _newlines_ são normalmente invisíveis:

~~~~ {.python}
>>> s = '1 2\t 3\n 4'
>>> print(s)
1 2  3
 4
~~~~

\index{função repr}
\index{repr!função}
\index{representação em string}

A função interna `repr` pode ajudar. Ela pega qualquer parâmetro como argumento
e retorna uma representação em string desse objeto. Para strings, caracteres de
espaço em branco são representados como sequências de barra invertida:

~~~~ {.python}
>>> print(repr(s))
'1 2\t 3\n 4'
~~~~

Isso pode ajudar no tratamento de erros.

Um outro problema que você deve encontrar é que diferentes sistemas usam caracteres
diferentes par indicar o fim de uma linha. Alguns usam o _newline_, representado
por `\n`. Outros usam o caractere de retorno, o `\r`. ALguns usam ambos. Se você
mover arquivos de um sistema para outro, essas inconsistências podem causam problemas.


\index{caractere de fim de linha}

Para a maioria dos sistemas, existem aplicações que convertem de um formato para o 
outro. Você pode achar elas (e ler mais sobre esse problema) em 
[wikipedia.org/wiki/Newline](wikipedia.org/wiki/Newline). Ou, é claro, você
pode escrever uma por conta própria.

Glossário
--------

arquivo de texto
:   Uma sequência de caracteres colocada em um armazenamento permanente, como um
    disco rígido
\index{arquivo de texto}

capturar
:   Para prevenir que uma exceção encerre o programa. É usado com
    as sentenças `try`e `except`
\index{capturar}

Controle de Qualidade
:   Uma pessoa ou time focado em assegurar a qualidade geral de um produto
    de software. O CA é frequentemente envolvido em testes de um produto e
    na identificação de problemas antes que o produto seja distribuído.
\index{Controle de Qualidade}
\index{CA}

newline
:   Um caractere especial usado em arquivos e _strings_ para indicar o fim
    de uma linha.
\index{newline}

Pythonico
:   Uma técnica que funciona de forma elegante em Python. "Usar try e except é
    a forma *Pythonica* de contornar arquivos inexistentes"
\index{Pythonico}


Exercícios
---------

**Exercício 1: Escreva um programa que leia um arquivo e mostre o conteúdo deste
(linha por linha), completamente em caixa alta. A execução do programa deverá ser
a seguinte:**

~~~~
python shout.py
Digite o nome de um arquivo: mbox-short.txt
FROM STEPHEN.MARQUARD@UCT.AC.ZA SAT JAN  5 09:14:16 2008
RETURN-PATH: <POSTMASTER@COLLAB.SAKAIPROJECT.ORG>
RECEIVED: FROM MURDER (MAIL.UMICH.EDU [141.211.14.90])
     BY FRANKENSTEIN.MAIL.UMICH.EDU (CYRUS V2.3.8) WITH LMTPA;
     SAT, 05 JAN 2008 09:14:16 -0500
~~~~

**Você pode baixar o arquivo em: ** [www.py4e.com/code3/mbox-short.txt](http://www.py4e.com/code3/mbox-short.txt)

**Exercício 2: Escreva um programa que solicite um arquivo e então leia ele
e procure por linhas da forma:**

~~~~
X-DSPAM-Confidence: 0.8475
~~~~

**Quando encontrar uma linha que inicie com "X-DSPAM-Confidence:" separe a linha do texto
para extrair o número de ponto flutuante que ela contém. Conte essas linhas e então compute 
o total de valores de Confiança de Spam nelas. Quando chegar no fim do arquivo, mostre a média
de Confiança de Spam.**

~~~~
Digite o nome de um arquivo: mbox.txt
Média de confiança de spam: 0.894128046745

Digite o nome de um arquivo: mbox-short.txt
Média de confiança de spam: 0.750718518519
~~~~

**Teste seu programa com os arquivos *mbox.txt* e *mbox-short.txt* **

**Exercício 2: Às vezes, quando os programadores estão entediados ou querem um pouco de diversão, 
eles adicionam um *_Easter Egg_* inofensivo em seus programas. Modifique o programa que solicita 
um arquivo ao usuário para que ele mostre uma mensagem engraçada quando o usuário deigitar no nome
do arquivo "na na
boo boo". O programa deve se comportar normalmente para todos os outros arquivos que existem e que
não existem. Aqui está uma amostra da execução desse programa: **

~~~~
python egg.py
Digite o nome de um arquivo: mbox.txt
Há 1797 linhas de assunto em mbox.txt

python egg.py
Digite o nome de um arquivo: missing.tyxt
Arquivo não pôde ser aberto: missing.tyxt

python egg.py
Digite o nome de um arquivo: na na boo boo
NA NA BOO BOO PRA VOCÊ TAMBÉM!
~~~~

**Nós não estamos encorajando você a pôr _Easter Eggs_ nos seus programas,
isso é apenas um exercício.**

