
Object-oriented programming
===========================

Managing larger programs
------------------------

\index{object-oriented}

At the beginning of this book, we came up with four basic programming
patterns which we use to construct programs:

* Sequential code
* Conditional code (if statements)
* Repetitive code (loops)
* Store and reuse (functions)

In later chapters, we explored simple variables as well as collection
data structures like lists, tuples, and dictionaries.

As we build programs, we design data structures and write code
to manipulate those data structures.   There are many ways to write programs
and by now, you probably have written some programs that are "not so elegant"
and other programs that are "more elegant". Even though your programs
may be small, you are starting to see how there is a bit of art and
aesthetic to writing code.

As programs get to be millions of lines long, it becomes increasingly important
to write code that is easy to understand.  If you are working on a million-line
program, you can never keep the entire program in your mind at the same time.
We need ways to break large programs into multiple smaller pieces so that
we have less to look at when solving a problem, fix a bug, or add a new feature.

In a way, object oriented programming is a way to arrange your code
so that you can zoom into 50 lines of the code and understand it
while ignoring the other 999,950 lines of code for the moment.

Getting started
---------------

Like many aspects of programming, it is necessary to learn the concepts of
object oriented programming before you can use them effectively.
You should approach this chapter as a way to learn some terms and concepts and work
through a few simple examples to lay a foundation for future learning.

The key outcome of this chapter is to have a basic understanding of how
objects are constructed and how they function and most importantly how
we make use of the capabilities of objects that are provided to us by Python
and Python libraries.

Using objects
-------------

As it turns out, we have been using objects all along in this book. Python
provides us with many built-in objects. Here is some simple code
where the first few lines should feel very simple and natural to you.

\index{list object}

\VerbatimInput{../code3/party1.py}

Instead of focusing on what these lines accomplish, let's look at what is
really happening from the point of view of object-oriented programming.
Don't worry if the following paragraphs don't make any sense the
first time you read them because we have not yet defined all of these terms.

The first line *constructs* an object of type `list`, the second and third
lines *call* the `append()` *method*, the fourth line calls
the `sort()` method, and the fifth line *retrieves* the item at position 0.

The sixth line calls the `__getitem__()` method in the `stuff` list
with a parameter of zero.

~~~~ {.python}
print (stuff.__getitem__(0))
~~~~

The seventh line is an even more verbose way of retrieving the 0th item
in the list.

~~~~ {.python}
print (list.__getitem__(stuff,0))
~~~~

In this code, we call the `__getitem__` method in the `list` class
and *pass* the list and the item we want retrieved from the list
as parameters.

The last three lines of the program are equivalent, but it is more
convenient to simply use the square bracket syntax to look up an item at
a particular position in a list.

We can take a look at the capabilities of an object by
looking at the output of the `dir()` function:

    >>> stuff = list()
    >>> dir(stuff)
    ['__add__', '__class__', '__contains__', '__delattr__',
    '__delitem__', '__dir__', '__doc__', '__eq__',
    '__format__', '__ge__', '__getattribute__', '__getitem__',
    '__gt__', '__hash__', '__iadd__', '__imul__', '__init__',
    '__iter__', '__le__', '__len__', '__lt__', '__mul__',
    '__ne__', '__new__', '__reduce__', '__reduce_ex__',
    '__repr__', '__reversed__', '__rmul__', '__setattr__',
    '__setitem__', '__sizeof__', '__str__', '__subclasshook__',
    'append', 'clear', 'copy', 'count', 'extend', 'index',
    'insert', 'pop', 'remove', 'reverse', 'sort']
    >>>

The rest of this chapter will define all of the above terms so make sure to
come back after you finish the chapter and re-read the above paragraphs to
check your understanding.

Iniciando com programas
----------------------

Um programa em sua forma básica recebe algumas entradas, processa algumas informações e 
produz algumas saídas. Nosso código do elevador apresenta um programa bem pequeno,
porém completo, que mostra todos esses três passos.

\VerbatimInput{../code3/elev.py}

Se analisarmos um pouco mais o código, existe o "mundo externo" e o programa.
As expressões de entrada e saída são onde o programa interage com o mundo externo.
Em posse do programa, temos o código e os dados para concluir as tarefas que o 
programa foi feito para resolver.

![A Program](height=1.20in@../images/program)

Uma forma de pensar acerca de programação orientada a objetos é que ela separa o 
programa em multiplas "zonas". Cada zona contem parte do código e dos dados (como
um programa) e tem interações bem definidas com o mundo real e com as outras partes do
programa.

Se olharmos novamente para a aplicação da extração de link em que usamos a
biblioteca BeautfulSoup, podemos ver um programa que está contruído por diferentes 
conexões de objetos juntos para realizar a tarefa

\index{BeautifulSoup}
\index{HTML}
\index{parsing!HTML}

\VerbatimInput{../code3/urllinks.py}

Nós lemos o URL na string e então passamos para o `urllib` para recuperação dos
dados da internet. A biblioteca `urllib` usa a biblioteca `socket` para firmar a 
conexão atual para recuperação dos dados. Captamos a string que o `urllib` retorna e
enviamos para o BeautfulSoup analisar. BeautfulSoup utiliza o objeto
`html.parser`^[https://docs.python.org/3/library/html.parser.html] e retorna um 
objeto. Utilizamos o método `tags()` do objeto retornado para captar um dicionário
de objetos tag. Nós iteramos os tags em acionamos o método `get()` para cada tag
e mostramos em tela o atributo `href`,

Nó podemos desenhar uma imagem desse programa e como os objetos trabalham juntos.

![A Program as Network of Objects](height=1.50in@../images/program-oo)

A intenção aqui não é entender perfeitamente como o programa funciona, mas ver como
construímos uma rede de objetos interativos e como orquestrar o fluxo de informações
entre os objetos para criar o programa. É também importante notar que quando 
você olhou para o programa há alguns capítulos atrás, você conseguiu entender
completamente o que estava acontecendo com o programa sem imaginar que ele estava 
"orquestrando o movimento dos dados entre os objetos". Isso foram apenas linhas
de código que completaram o trabalho.

Subdividindo um problema
---------------------

Umas das vantagens da programação orientada a objetos é que ela consegue esconder
a complexidade do código. Por exemplo, enquanto precisamos saber como usar os 
códigos do `urllib` e BeautifulSoup, nós não precisamos saber como essas bibliotecas 
funcionam internamente. Isso nos permite focar na resolução do problema e ignorar as
outras partes do programa

![Ignoring Detail When Using an Object](height=1.50in@../images/program-oo-code)

Essa habilidade de focar exclusivamente na parte importante do programa e ignorar
o resto também é útil para os desenvolvedores dos objetos que usamos. Por exemplo,
desenvolvendo o BeautifulSoup os programadores não precisam saber ou se importar 
como recuperamos nossa página HTML, que partes queremos ler ou o quais ou planos 
que temos com os dados extraídos da página.

![Ignoring Detail When Building an Object](height=1.50in@../images/program-oo-bs4)

Our first Python object
-----------------------

At a basic level, an object is simply some code plus data structures that are
smaller than a whole program. Defining a function allows us to store
a bit of code and give it a name and then later invoke that code using the
name of the function.

An object can contain a number of functions (which we call *methods*) as
well as data that is used by those functions.  We call data items that are
part of the object *attributes*.

\index{class keyword}

We use the `class` keyword to define the data and code that will make up each
of the objects. The class keyword includes the name of the class and begins
an indented block of code where we include the attributes (data)
and methods (code).

\VerbatimInput{../code3/party2.py}

Each method looks like a function, starting with the `def` keyword and
consisting of an indented block of code.  This object has one attribute (`x`)
and one method (`party`).  The methods have a special first parameter that
we name by convention `self`.

Just as the `def` keyword does not cause function code to be executed, the
`class` keyword does not create an object.  Instead, the `class`
keyword defines a template indicating what data and code will be contained
in each object of type `PartyAnimal`.  The class is like a cookie cutter
and the objects created using the class are the
cookies^[Cookie image copyright CC-BY
https://www.flickr.com/photos/dinnerseries/23570475099].
You don't put frosting on the cookie cutter;
you put frosting on the cookies, and you can put different frosting
on each cookie.

![A Class and Two Objects](height=2.0in@../photos/cookie_cutter_flickr_Didriks)

If we continue through this sample program, we see the first executable line of
code:

~~~~ {.python}
an = PartyAnimal()
~~~~

\index{construct}
\index{object}
\index{instance}
\index{class}

This is where we instruct Python to construct (i.e., create) an *object* or
*instance* of the class `PartyAnimal`. It looks like a function call to the
class itself. Python constructs the object with the right data and methods
and returns the object which is then assigned to the variable `an`.
In a way this is quite similar to the following line which we have
been using all along:

~~~~ {.python}
counts = dict()
~~~~

Here we instruct Python to construct an object using the `dict` template
(already present in Python), return the instance of dictionary,
and assign it to the variable `counts`.

When the `PartyAnimal` class is used to construct an object, the variable `an`
is used to point to that object.  We use `an` to access the code and data for that
particular instance of the `PartyAnimal` class.

Each Partyanimal object/instance contains within it a variable `x`
and a method/function named `party`. We call the `party` method in this line:

~~~~ {.python}
an.party()
~~~~

When the `party` method is called, the first parameter (which we call by convention `self`)
points to the particular instance of the PartyAnimal object that `party` is called from.
Within the `party` method, we see the line:

~~~~ {.python}
self.x = self.x + 1
~~~~

This syntax using the *dot* operator is saying 'the x within self.' Each time `party()` is
called, the internal `x` value is incremented by 1 and the value is printed out.

The following line is another way to call the `party` method within the `an`
object:

~~~~ {.python}
PartyAnimal.party(an)
~~~~

In this variation, we access the code from within the class and explicitly
pass the object pointer `an` as the first parameter (i.e., `self` within the method).
You can think of `an.party()` as shorthand for the above line.

When the program executes, it produces the following output:

~~~~
So far 1
So far 2
So far 3
So far 4
~~~~

The object is constructed, and the `party` method is called four times, both
incrementing and printing the value for `x` within the `an` object.

Classes as types
----------------

\index{dir}
\index{type}

As we have seen, in Python all variables have a type.  We can use the built-in
`dir` function to examine the capabilities of a variable.  We can also use `type` and
`dir` with the classes that we create.

\VerbatimInput{../code3/party3.py}

When this program executes, it produces the following output:

~~~~
Type <class '__main__.PartyAnimal'>
Dir  ['__class__', '__delattr__', ...
'__sizeof__', '__str__', '__subclasshook__',
'__weakref__', 'party', 'x']
Type <class 'int'>
Type <class 'method'>
~~~~

You can see that using the `class` keyword, we have created a new type.
From the `dir` output, you can see both the `x` integer attribute and the `party`
method are available in the object.

Object lifecycle
----------------

\index{constructor}
\index{destructor}
\index{object lifecycle}

In the previous examples, we define a class (template), use that class
to create an instance of that class (object), and then use the instance.  When
the program finishes, all of the variables are discarded.  Usually, we don't think
much about the creation and destruction of variables, but often as our objects
become more complex, we need to take some action within the object to set things
up as the object is constructed and possibly clean things up as the object is
discarded.

If we want our object to be aware of these moments of construction and destruction,
we add specially named methods to our object:

\VerbatimInput{../code3/party4.py}

When this program executes, it produces the following output:

~~~~
I am constructed
So far 1
So far 2
I am destructed 2
an contains 42
~~~~

As Python constructs our object, it calls our `__init__` method to
give us a chance to set up some default or initial values for the object.
When Python encounters the line:

~~~~
an = 42
~~~~

It actually "thows our object away" so it can reuse the `an` variable
to store the value `42`.  Just at the moment when our `an` object is
being "destroyed" our destructor code (`__del__`) is called.  We cannot
stop our variable from being destroyed, but we can do any necessary
cleanup right before our object no longer exists.

When developing objects, it is quite common to add a constructor to an object
to set up initial values for the object. It is relatively rare to need a
destructor for an object.

Multiple instances
------------------

So far, we have defined a class, constructed a single object, used
that object, and then thrown the object away. However, the real power
in object-oriented programming happens when we construct multiple instances
of our class.

When we construct multiple objects from our class, we might want to set
up different initial values for each of the objects. We can
pass data to the constructors to give each object a different initial
value:

\VerbatimInput{../code3/party5.py}

The constructor has both a `self` parameter that points to the object instance
and additional parameters that are passed into the constructor as the
object is constructed:

~~~~
s = PartyAnimal('Sally')
~~~~

Within the constructor, the second line copies the parameter (`nam`) that is
passed into the `name` attribute within the object instance.

~~~~
self.name = nam
~~~~

The output of the program shows that each of the objects (`s` and `j`) contain their own
independent copies of `x` and `nam`:

~~~~
Sally constructed
Sally party count 1
Jim constructed
Jim party count 1
Sally party count 2
~~~~

Inheritance
-----------

Another powerful feature of object-oriented programming is the ability to
create a new class by extending an existing class.  When extending a class,
we call the original class the *parent class* and the new class the
*child class*.

For this example, we move our `PartyAnimal` class into its own file.
Then, we can 'import' the `PartyAnimal` class in a new file and extend it, as follows:

\VerbatimInput{../code3/party6.py}

When we define the `CricketFan` class, we indicate that we are extending
the `PartyAnimal` class.  This means that all of the variables (`x`) and methods
(`party`) from the `PartyAnimal` class are *inherited* by the `CricketFan` class.
For example, within the `six` method in the `CricketFan` class, we 
call the `party` method from the `PartyAnimal` class.

As the program executes, we create `s` and `j` as independent instances
of `PartyAnimal` and `CricketFan`. The `j` object has additional capabilities beyond
the `s` object.

~~~~
Sally constructed
Sally party count 1
Jim constructed
Jim party count 1
Jim party count 2
Jim points 6
['__class__', '__delattr__', ... '__weakref__',
'name', 'party', 'points', 'six', 'x']
~~~~

In the `dir` output for the `j` object (instance of the `CricketFan` class), we see
that it has the attributes and methods of the parent class, as well as the attributes
and methods that were added when the class was extended to create the `CricketFan` class.

Sumário
-------

Esta é uma rápida introdução à programação orientada a objetos, que foca principalmente na terminologia e na sintaxe da definição e uso de objetos. Vamos rapidamente rever o código que nós vimos no início do capítulo. Neste ponto você já deve entender completamente o que está acontecendo.

\VerbatimInput{../code3/party1.py}

A primeira linha constrói uma `list` (lista) de *objetos*. Quando Python cria a `list` de objetos, ele chama o método *construtor* (chamado `__init__`) para inicializar os atributos de dados internos que serão usados para armazenar os dados da lista. Nós não passamos nenhum parâmetro para o *construtor*. Quando o construtor retorna, nós usamos a variável `coisas` para apontar para a instância retornada da classe `list`.

A segunda e terceira linhas chamam o método `append` com um parâmetro para adicionar um novo item no fim da lista atualizando os atributos dentro de `coisas`. Então, na linha quatro, chamamos o método `sort` sem nenhum parâmetro para ordenar os dados dentro do objeto `coisas`.

Então, nós iremos imprimir o primeiro item da lista usando colchetes, que são uma maneira mais curta de chamar o método `__getitem__`. Seria o equivalente a chamar o método `__getitem__` da *classe* `list` e passar o objeto `coisas` como primeiro parâmetro e a posição desejada como segundo parâmetro.

No fim do programa, o objeto `coisas` é descartado, mas não antes de chamar o *destruidor* (chamado `__del__`) para que o objeto possa limpar qualquer dado que tenha sido deixado para trás, conforme o necessário.

Esses são conceitos básicos para programação orientada a objetos. Há muitos detalhes sobre a melhor maneira de usar abordagens orientadas a objeto ao desenvolver aplicativos, e também grandes bibliotecas que estão fora do escopo deste capítulo.^[Se você estiver curioso sobre onde a classe `list` é definida, dê uma olhada em (espero que a URL não mude)
https://github.com/python/cpython/blob/master/Objects/listobject.c -
a classe list é escrita numa linguagem chamada “C”. Se você der uma olhada nesse código-fonte e achar curioso, talvez queira explorar alguns cursos de Ciência da Computação.]

Glossário
---------

atributo
:   Uma variável que é parte de uma classe.
\index{atributo}

classe
:   Um modelo usado para a construção de um objeto. Define os atributos e métodos que farão parte do objeto.
\index{classe}

clase filha
:   Uma nova classe criada quando a classe pai é estendida. A classe filha herda os atributos e métodos da classe pai.
\index{classe filha}

construtor
:   Um método opcional especialmente nomeado (`__init__`) que é chamado no momento em que uma classe está sendo usada para construir um objeto. Normalmente é usado para definir os valores iniciais do objeto.
\index{construtor}

destruidor
:   Um método opcional especialmente nomeado (`__del__`) que é chamado no momento imediatamente anterior ao objeto ser destruído. Destruidores são raramente usados.
\index{destruidor}

herança
:   Quando nós criamos uma nova classe (filha) estendendo uma classe existente (pai). A classe filha tem todos os atributos e métodos da classe pai mais atributos e métodos adicionais definidos por ela mesma.
\index{herança}

método
:   Uma função contida numa classe e nos objetos construídos pela classe. Alguns padrões orientados a objeto usam 'mensagem' em vez de 'método' para descrever esse conceito.
\index{método}
\index{mensagem}

objeto
:   Uma instância construída de uma classe. Um objeto contém todos os atributos e métodos que foram definidos pela classe. Algumas documentações orientadas a objeto usam o termo 'instância' e 'objeto' indistintamente.
\index{método}

classe pai
:   A classe que está sendo estendida para criar uma nova classe filha. A classe pai contribui com todos os seus métodos e atributos para a nova classe filha.
\index{classe pai}








