Using Web Services
==================

Once it became easy to retrieve documents and parse documents over HTTP
using programs, it did not take long to develop an approach where we
started producing documents that were specifically designed to be
consumed by other programs (i.e., not HTML to be displayed in a
browser).

There are two common formats that we use when exchanging data across the
web. eXtensible Markup Language (XML) has been in use for a very
long time and is best suited for exchanging document-style data. When
programs just want to exchange dictionaries, lists, or other internal
information with each other, they use JavaScript Object Notation (JSON)
(see [www.json.org](http://www.json.org)). We will look at both formats.

eXtensible Markup Language - XML
--------------------------------

XML looks very similar to HTML, but XML is more structured than HTML.
Here is a sample of an XML document:

~~~~ {.xml}
<person>
  <name>Chuck</name>
  <phone type="intl">
    +1 734 303 4456
  </phone>
  <email hide="yes" />
</person>
~~~~

Each pair of opening (e.g., `<person>`) and closing tags
(e.g., `<\person>`) represents a *element* or *node* with the same
name as the tag (e.g., `person`). Each element can have some text,
some attributes (e.g., `hide`), and other nested elements. If an XML
element is empty (i.e., has no content), then it may be depicted by
a self-closing tag (e.g., `<email />`).

Often it is helpful to think of an XML document as a tree structure
where there is a top element (here: `person`), and other tags (e.g.,
`phone`) are drawn as *children* of their *parent* elements.

![A Tree Representation of XML](height=2.0in@../images/xml-tree)

Parsing XML
-----------

\index{ElementTree}
\index{ElementTree!fromstring}
\index{ElementTree!find}

Here is a simple application that parses some XML and extracts some data
elements from the XML:

\VerbatimInput{../code3/xml1.py} 

The triple single quote (`'''`), as well as the triple double quote (`"""`), allow for the creation of strings that span multiple lines.

Calling `fromstring` converts the string representation of
the XML into a "tree" of XML elements. When the XML is in a tree,
we have a series of methods we can call to extract portions
of data from the XML string.  The `find` function searches
through the XML tree and retrieves the element that matches
the specified tag.

~~~~
Name: Chuck
Attr: yes
~~~~

Using an XML parser such as `ElementTree` has the advantage
that while the XML in this example is quite simple, it turns out there
are many rules regarding valid XML, and using `ElementTree`
allows us to extract data from XML without worrying about the rules of
XML syntax.

Looping through nodes
---------------------

\index{ElementTree!findall}
\index{ElementTree!get}

Often the XML has multiple nodes and we need to write a loop to process
all of the nodes. In the following program, we loop through all of the
`user` nodes:

\VerbatimInput{../code3/xml2.py} 

The `findall` method retrieves a Python list of subtrees that
represent the `user` structures in the XML tree. Then we can
write a `for` loop that looks at each of the user nodes, and
prints the `name` and `id` text elements as well
as the `x` attribute from the `user` node.

~~~~
User count: 2
Name Chuck
Id 001
Attribute 2
Name Brent
Id 009
Attribute 7
~~~~

It is important to include all parent level elements in the `findall`
statement except for the top level element (e.g., `users/user`).
Otherwise, Python will not find any desired nodes.

~~~~ {.python}
import xml.etree.ElementTree as ET

input = '''
<stuff>
  <users>
    <user x="2">
      <id>001</id>
      <name>Chuck</name>
    </user>
    <user x="7">
      <id>009</id>
      <name>Brent</name>
    </user>
  </users>
</stuff>'''

stuff = ET.fromstring(input)

lst = stuff.findall('users/user')
print('User count:', len(lst))

lst2 = stuff.findall('user')
print('User count:', len(lst2))
~~~~

`lst` stores all `user` elements that are nested within their `users`
parent. `lst2` looks for `user` elements that are not nested within
the top level `stuff` element where there are none.

~~~~
User count: 2
User count: 0
~~~~

JavaScript Object Notation - JSON
---------------------------------

\index{JSON}
\index{JavaScript Object Notation}

The JSON format was inspired by the object and array format used in the
JavaScript language. But since Python was invented before JavaScript,
Python's syntax for dictionaries and lists influenced the syntax of
JSON. So the format of JSON is nearly identical to a combination of
Python lists and dictionaries.

Here is a JSON encoding that is roughly equivalent to the simple XML
from above:

~~~~ {.json}
{
  "name" : "Chuck",
  "phone" : {
    "type" : "intl",
    "number" : "+1 734 303 4456"
   },
   "email" : {
     "hide" : "yes"
   }
}
~~~~

You will notice some differences. First, in XML, we can add attributes
like "intl" to the "phone" tag. In JSON, we simply have key-value pairs.
Also the XML "person" tag is gone, replaced by a set of outer curly
braces.

In general, JSON structures are simpler than XML because JSON has fewer
capabilities than XML. But JSON has the advantage that it maps
*directly* to some combination of dictionaries and lists.
And since nearly all programming languages have something equivalent to
Python's dictionaries and lists, JSON is a very natural format to have
two cooperating programs exchange data.

JSON is quickly becoming the format of choice for nearly all data
exchange between applications because of its relative simplicity
compared to XML.

Análise JSON
------------

Construímos nosso JSON por dicionários e listas de aninhamento, conforme necessário. Neste exemplo, representamos uma lista de usuários, onde estes fazem parte de um conjunto de pares de valores-chave (por exemplo, um dicionário). Então nós temos uma lista de dicionários.

No programa a seguir, usamos a biblioteca `json` interna para analisar o JSON e ler os dados. Compare isso de perto com os dados e códigos XML equivalentes acima. O JSON tem menos detalhes, portanto, devemos saber antecipadamente que estamos obtendo uma lista de usuários, e cada usuário é um conjunto de pares de valores-chave. O JSON é mais sucinto (uma vantagem), mas também é menos autodescritivo (uma desvantagem).


\VerbatimInput{../code3/json2.py}

Se você comparar o código para extrair dados do JSON e XML analisados, verá que o que obtemos de `json.loads()` é uma lista do Python que percorremos com um loop `for`, e cada item dentro dessa lista é um dicionário do Python. Uma vez que o JSON tenha sido analisado, podemos usar o operador de indexação do Python para extrair os vários bits de dados para cada usuário. Não precisamos usar a biblioteca JSON para analisar o JSON, pois os dados retornados são simplesmente estruturas nativas do Python.

A saída deste programa é exatamente igual à versão XML acima.

~~~~
User count: 2
Name Chuck
Id 001
Attribute 2
Name Brent
Id 009
Attribute 7
~~~~

Em geral, há uma tendência do setor de XML e de JSON para serviços da web. Como o JSON é mais simples e mapeia mais diretamente estruturas de dados nativas que já temos nas linguagens de programação, o código de análise e extração de dados é geralmente mais simples e mais direto ao usar o JSON. Mas o XML é mais autodescritivo e, portanto, há alguns aplicativos em que o XML mantém uma vantagem. Por exemplo, a maioria dos processadores de texto armazena documentos internamente usando XML em vez de JSON.

Interfaces de Programação de Aplicativos
----------------------------------

Agora temos a capacidade de trocar dados entre aplicativos usando o HyperText Transport Protocol (HTTP) e uma maneira de representar dados complexos que estamos enviando entre esses aplicativos usando XML (Extensible Markup Language) ou JavaScript Object Notation (JSON).

O próximo passo é começar a definir e documentar “contratos” entre aplicativos usando essas técnicas. O nome geral para esses contratos de aplicativo é *Application Program Interfaces* (APIs). Quando usamos uma API, geralmente um programa disponibiliza um conjunto de serviços para uso por outros aplicativos e publica as APIs (ou seja, as "regras") que devem ser seguidas para acessar os serviços fornecidos pelo programa.

Quando começamos a construir nossos programas nos quais a funcionalidade dele inclui o acesso a serviços fornecidos por outros programas, chamamos a abordagem de *Service-Oriented Architecture*  (SOA). Uma abordagem SOA é aquela em que nosso aplicativo geral faz uso dos serviços de outros aplicativos. Uma abordagem não SOA é onde o aplicativo é um aplicativo autônomo único que contém todo o código necessário para implementar o aplicativo.

Nós vemos muitos exemplos de SOA quando usamos a web. Podemos ir a um único site e reservar viagens aéreas, hotéis e automóveis em um único site. Os dados para hotéis não são armazenados nos computadores da companhia aérea. Em vez disso, os computadores da companhia aérea entram em contato com os serviços nos computadores do hotel, recuperam os dados do hotel e os apresentam ao usuário. Quando o usuário concorda em fazer uma reserva de hotel usando o site da companhia aérea, o site da companhia aérea usa outro serviço da web nos sistemas do hotel para realmente fazer a reserva. E quando chega a hora de cobrar seu cartão de crédito por toda a transação, outros computadores ficam envolvidos no processo.

![Service-oriented architecture](height=3.0in@../images/soa)

Uma Service-Oriented Architecture tem muitas vantagens, incluindo: (1) sempre mantemos apenas uma cópia de dados (isso é particularmente importante para coisas como reservas de hotéis em que não queremos ser excessivamente comprometidos) e (2) os proprietários podem definir as regras sobre o uso de seus dados. Com essas vantagens, um sistema SOA deve ser cuidadosamente projetado para ter um bom desempenho e atender às necessidades do usuário.

Quando um aplicativo disponibiliza um conjunto de serviços em sua API pela internet, chamamos de *serviços web*.

Security and API usage
----------------------

\index{OAuth}
\index{API!key}

It is quite common that you need an API key to make use of a
vendor's API. The general idea is that they want to know who is using
their services and how much each user is using. Perhaps they have free
and pay tiers of their services or have a policy that limits the number
of requests that a single individual can make during a particular time
period.

Sometimes once you get your API key, you simply include the key as part
of POST data or perhaps as a parameter on the URL when calling the API.

Other times, the vendor wants increased assurance of the source of the
requests and so they expect you to send cryptographically signed
messages using shared keys and secrets. A very common technology that is
used to sign requests over the Internet is called
*OAuth*. You can read more about the OAuth protocol at
[www.oauth.net](http://www.oauth.net).

Thankfully there are a number of convenient
and free OAuth libraries so you can avoid writing an OAuth
implementation from scratch by reading the specification. These
libraries are of varying complexity and have varying degrees of
richness. The OAuth web site has information about various OAuth
libraries.

Glossary
--------

API
:   Application Program Interface - A contract between applications that
    defines the patterns of interaction between two application
    components.
\index{API}

ElementTree
:   A built-in Python library used to parse XML data.
\index{ElementTree}

JSON
:   JavaScript Object Notation. A format that allows for the markup of
    structured data based on the syntax of JavaScript Objects.
\index{JSON}
\index{JavaScript Object Notation}

SOA
:   Service-Oriented Architecture. When an application is made of
    components connected across a network.
\index{SOA}
\index{Service Oriented Architecture}

XML
:   eXtensible Markup Language. A format that allows for the markup of
    structured data.
\index{XML}
\index{eXtensible Markup Language}

Aplicação 1: Web service de geocódigo Google
----------------------------

\index{Google}
\index{geocoding}
\index{web service}

A Google tem um excelente serviço web que nos permite fazer uso de sua grande base de dados em relação à informação geográfica. Podemos enviar uma string de busca geográfica como: “Ann Arbor, MI” para sua API de geocódigo e fazer com que a Google nos retorne os melhores palpites para onde, no mapa, podemos encontrar nossa string de busca e nos contar sobre locais próximos

O serviço de geocódigo é de graça, porém tem taxa limitada, de forma que você não poderá fazer uso ilimitado da API em uma aplicação comercial. Contudo, se você tiver alguns dados de pesquisa, em que o usuário final inseriu a localização em uma caixa de entrada de formato livre, essa API pode ser utilizada ajustar os dados da string de busca.

*Quando se está utilizando uma API gratuita como a API de geocódigo da Google, você precisa fazer uso consciente destes recursos. Se muitas pessoas abusarem do serviço, a Google pode desistir ou reduzir significativamente seus serviços gratuitos.*

\index{rate limiting}

Você pode ler a documentação online para este serviço, porém é bem simples e você pode até fazer o teste usando um navegador, basta digitar a URL a seguir:

[http://maps.googleapis.com/maps/api/geocode/json?address=Ann+Arbor%2C+MI](http://maps.googleapis.com/maps/api/geocode/json?address=Ann+Arbor%2C+MI)

A seguir temos uma simples aplicação para solicitar ao usuário uma string de busca, chamar a API de geocódigo da Google e extrair as informações do JSON retornado.

\VerbatimInput{../code3/geojson.py} 

O programa pega uma string de busca e constrói uma URL com essa string como parâmetro corretamente codificado, e então usa a `urllib`para recuperar o texto da API de geocódigo. Diferentemente de uma página web fixa, a informação que recebemos depende dos parâmetros que enviamos e dos dados geográficos armazenados nos servidores da Google. 

Uma vez que tenhamos recebida os dado JSON, analisamos ela com a biblioteca `json` e fazemos alguns teste para confirmar que recebemos bons dados, por fim extraímos as informações que procuramos. 

A saída do programa é como a mostrada a seguir (parte do JSON foi retirada):

~~~~
$ python3 geojson.py
Enter location: Ann Arbor, MI
Retrieving http://maps.googleapis.com/maps/api/
  geocode/json?address=Ann+Arbor%2C+MI
Retrieved 1669 characters
~~~~

~~~~ {.json}
{
  "status": "OK",
  "results": [
    {
      "geometry": {
        "location_type": "APPROXIMATE",
        "location": {
          "lat": 42.2808256,
          "lng": -83.7430378
        }
      },
      "address_components": [
        {
          "long_name": "Ann Arbor",
          "types": [
            "locality",
            "political"
          ],
          "short_name": "Ann Arbor"
        }
      ],
      "formatted_address": "Ann Arbor, MI, USA",
      "types": [
        "locality",
        "political"
      ]
    }
  ]
}
lat 42.2808256 lng -83.7430378
Ann Arbor, MI, USA
~~~~

~~~~
Enter location:
~~~~

You can download
[www.py4e.com/code3/geoxml.py](http://www.py4e.com/code3/geoxml.py) to
explore the XML variant of the Google geocoding API.

**Exercício 1: Altere um dos arquivos** [**geojson.py**](http://www.py4e.com/code3/geojson.py) **ou**
[**geoxml.py**](http://www.py4e.com/code3/geoxml.py) **para que a saída do programa mostre os dois caracteres referentes ao código de país dos dados recebidos. Adicione verificadores de erro para que o programa não informe um traceback em caso de não haver código de país. Uma vez que o programa esteja funcionando, procure por “Oceano Atlântico” e confirme que o programa pode lidar com localizações que não pertencem a nenhum país.** 

Aplicação 2: Twitter
----------------------

Como a API Twitter vem se tornado cada vez mais valiosa, o Twitter passou de uma API aberta e pública para uma API que requer o uso de assinaturas OAuth em cada requisição da API. 

Para nosso próximo programa, faça o download dos arquivos *twurl.py*, *hidden.py*, *oauth.py*, e *twitter1.py* de [www.py4e.com/code](http://www.py4e.com/code3) e os deixe na mesma pasta em seu computador.

Para fazer uso deste programa, você precisará ter uma conta no Twitter e autorizar seu código Python com uma aplicação, definir uma key, secret, token e token secret. Você deve editar o arquivo *hidden.py* e por essas quatro strings nas variáveis adequadas, dentro do arquivo:

\VerbatimInput{../code3/hidden.py} 

O web service do Twitter é acessado utilizando uma URL como esta:

<https://api.twitter.com/1.1/statuses/user_timeline.json>

Porém, uma vez que as informações de segurança tenham sido adicionadas, a URL se parecerá mais como esta:

~~~~
https://api.twitter.com/1.1/statuses/user_timeline.json?count=2
&oauth_version=1.0&oauth_token=101...SGI&screen_name=drchuck
&oauth_nonce=09239679&oauth_timestamp=1380395644
&oauth_signature=rLK...BoD&oauth_consumer_key=h7Lu...GNg
&oauth_signature_method=HMAC-SHA1
~~~~

Você pode ler a especificação OAuth se quiser saber mais sobre o significado dos diversos parâmetros que foram adicionados ao cumprir os requerimentos de segurança do OAuth.

Para os programas executados com Twitter, escondemos toda a complexidade nos arquivos *oauth.py* e *twurl.py*. Simplesmente definimos os secrets em *hidden.py* e então enviamos a URL desejada para a função *twurl.augment()* e o código da biblioteca adiciona todos os parâmetros à URL por nós.

Este programa requere a timeline para um usuário em particular do Twitter e a retorna numa string em formato JSON. Simplesmente mostramos os primeiros 250 caracteres da string: 

\VerbatimInput{../code3/twitter1.py} 
\begin{trinketfiles}
../code3/twurl.py
\end{trinketfiles}

Quando o programa for executado, produzirá a seguinte saída:

~~~~
Enter Twitter Account:drchuck
Retrieving https://api.twitter.com/1.1/ ...
[{"created_at":"Sat Sep 28 17:30:25 +0000 2013","
id":384007200990982144,"id_str":"384007200990982144",
"text":"RT @fixpert: See how the Dutch handle traffic
intersections: http:\/\/t.co\/tIiVWtEhj4\n#brilliant",
"source":"web","truncated":false,"in_rep
Remaining 178

Enter Twitter Account:fixpert
Retrieving https://api.twitter.com/1.1/ ...
[{"created_at":"Sat Sep 28 18:03:56 +0000 2013",
"id":384015634108919808,"id_str":"384015634108919808",
"text":"3 months after my freak bocce ball accident,
my wedding ring fits again! :)\n\nhttps:\/\/t.co\/2XmHPx7kgX",
"source":"web","truncated":false,
Remaining 177

Enter Twitter Account:
~~~~

Juntamente com os dados da timeline, o Twitter também nos entrega os metadados em relação à solicitação nos headers da resposta HTTP. Um header em particular, `x-rate-limit-remaining`, nos informa a quantidade de requisições que ainda podem ser feitas antes de sermos desconectados. Podemos observar que nossa quantidade de requisições restantes diminui em uma unidade a cada requisição à API.

No exemplo a seguir, recebemos informações sobre os amigos de um usuário, no Twitter. Em seguida, analisamos o conteúdo em JSON e extraímos algumas informações sobre os amigos. Ainda, desconsideramos o JSON após análise e mostramos a informação “bonitinha”, com identação de quatro caracteres para permitir examinar os dados quando quisermos extrair mais campos.

\VerbatimInput{../code3/twitter2.py} 
\begin{trinketfiles}
../code3/twurl.py
\end{trinketfiles}

Já que o JSON se torna um conjunto de listas e dicionários Python aninhados, podemos usar uma combinação de operação indexada e laços `for` para passeamos pela estrutura de dados retornada, usando um código Python bem pequeno.

A saída do programa é como a mostrada a seguir (alguns dos dados foram encurtados para caber na página):

~~~~
Enter Twitter Account:drchuck
Retrieving https://api.twitter.com/1.1/friends ...
Remaining 14
~~~~

~~~~ {.json}
{
  "next_cursor": 1444171224491980205,
  "users": [
    {
      "id": 662433,
      "followers_count": 28725,
      "status": {
        "text": "@jazzychad I just bought one .__.",
        "created_at": "Fri Sep 20 08:36:34 +0000 2013",
        "retweeted": false,
      },
      "location": "San Francisco, California",
      "screen_name": "leahculver",
      "name": "Leah Culver",
    },
    {
      "id": 40426722,
      "followers_count": 2635,
      "status": {
        "text": "RT @WSJ: Big employers like Google ...",
        "created_at": "Sat Sep 28 19:36:37 +0000 2013",
      },
      "location": "Victoria Canada",
      "screen_name": "_valeriei",
      "name": "Valerie Irvine",
    }
  ],
 "next_cursor_str": "1444171224491980205"
}
~~~~

~~~~
leahculver
   @jazzychad I just bought one .__.
_valeriei
   RT @WSJ: Big employers like Google, AT&amp;T are h
ericbollens
   RT @lukew: sneak peek: my LONG take on the good &a
halherzog
   Learning Objects is 10. We had a cake with the LO,
scweeker
   @DeviceLabDC love it! Now where so I get that "etc

Enter Twitter Account:
~~~~

A última parte da saída é onde vemos o laço for lendo os cinco “amigos” mais recentes da conta *@drchuck* no Twitter e mostramos o status mais recente para cada um desses amigos. Muito mais dados estão disponíveis no JSON obtido. Se você olhar na saída do programa, também poderá ver que de “find the friends” de uma conta em particular possui uma taxa de limitação diferente do número de consultas à timeline que são permitidas a serem executadas por período de tempo.

Essas keys da API são seguras, de forma que o Twitter sabe com confiança quem está usando seus dados e sua API, além das condições de uso. A tática de limitação de taxa nos permite que obtenhamos dados simples e pessoais, porém não permite que se desenvolva um produto que retire dados da API milhões de vezes por dia.


